
R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "predictmeans"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('predictmeans')
Loading required package: lme4
Loading required package: Matrix
Loading required package: nlme

Attaching package: 'nlme'

The following object is masked from 'package:lme4':

    lmList

Loading required package: lmeInfo
Loading required package: parallel
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CookD")
> ### * CookD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CookD
> ### Title: Calculates and plots Cook's distances for a Linear (Mixed) Model
> ### Aliases: CookD
> 
> ### ** Examples
> 
> library(predictmeans)
> Oats$nitro <- factor(Oats$nitro)
> fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> # library(lme4)
> # fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> CookD(fm)
> 
> 
> 
> cleanEx()
> nameEx("Kmatrix")
> ### * Kmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kmatrix
> ### Title: Matrix of Coefficients in a Linear Model
> ### Aliases: Kmatrix
> 
> ### ** Examples
> 
>   library(predictmeans)
>   data(Oats, package="nlme")
> # fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
>   fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
>   Kmatrix(fm, "Variety", prtnum=TRUE)$K

 The predicted means are estimated at 

nitro 
  0.3 

            (Intercept) nitro VarietyMarvellous VarietyVictory
Golden Rain           1   0.3                 0              0
Marvellous            1   0.3                 1              0
Victory               1   0.3                 0              1
            nitro:VarietyMarvellous nitro:VarietyVictory
Golden Rain                     0.0                  0.0
Marvellous                      0.3                  0.0
Victory                         0.0                  0.3
>   Kmatrix(fm, "Variety", 0.5, prtnum=TRUE)$K

 The predicted means are estimated at 

nitro 
  0.5 

            (Intercept) nitro VarietyMarvellous VarietyVictory
Golden Rain           1   0.5                 0              0
Marvellous            1   0.5                 1              0
Victory               1   0.5                 0              1
            nitro:VarietyMarvellous nitro:VarietyVictory
Golden Rain                     0.0                  0.0
Marvellous                      0.5                  0.0
Victory                         0.0                  0.5
>  # Kmatrix(fm, "Variety", "nitro")$K
>   Kmatrix(fm, "Variety", "nitro", covariateV=seq(0, 0.6, 0.1))$K
                (Intercept) nitro VarietyMarvellous VarietyVictory
Golden Rain:0             1   0.0                 0              0
Golden Rain:0.1           1   0.1                 0              0
Golden Rain:0.2           1   0.2                 0              0
Golden Rain:0.3           1   0.3                 0              0
Golden Rain:0.4           1   0.4                 0              0
Golden Rain:0.5           1   0.5                 0              0
Golden Rain:0.6           1   0.6                 0              0
Marvellous:0              1   0.0                 1              0
Marvellous:0.1            1   0.1                 1              0
Marvellous:0.2            1   0.2                 1              0
Marvellous:0.3            1   0.3                 1              0
Marvellous:0.4            1   0.4                 1              0
Marvellous:0.5            1   0.5                 1              0
Marvellous:0.6            1   0.6                 1              0
Victory:0                 1   0.0                 0              1
Victory:0.1               1   0.1                 0              1
Victory:0.2               1   0.2                 0              1
Victory:0.3               1   0.3                 0              1
Victory:0.4               1   0.4                 0              1
Victory:0.5               1   0.5                 0              1
Victory:0.6               1   0.6                 0              1
                nitro:VarietyMarvellous nitro:VarietyVictory
Golden Rain:0                       0.0                  0.0
Golden Rain:0.1                     0.0                  0.0
Golden Rain:0.2                     0.0                  0.0
Golden Rain:0.3                     0.0                  0.0
Golden Rain:0.4                     0.0                  0.0
Golden Rain:0.5                     0.0                  0.0
Golden Rain:0.6                     0.0                  0.0
Marvellous:0                        0.0                  0.0
Marvellous:0.1                      0.1                  0.0
Marvellous:0.2                      0.2                  0.0
Marvellous:0.3                      0.3                  0.0
Marvellous:0.4                      0.4                  0.0
Marvellous:0.5                      0.5                  0.0
Marvellous:0.6                      0.6                  0.0
Victory:0                           0.0                  0.0
Victory:0.1                         0.0                  0.1
Victory:0.2                         0.0                  0.2
Victory:0.3                         0.0                  0.3
Victory:0.4                         0.0                  0.4
Victory:0.5                         0.0                  0.5
Victory:0.6                         0.0                  0.6
> 
> 
> 
> cleanEx()
> nameEx("PMplot")
> ### * PMplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PMplot
> ### Title: Level Plot of a Matrix of p-values.
> ### Aliases: PMplot
> 
> ### ** Examples
> 
>   library(predictmeans)
>   set.seed(2013)
>   pvalues <- runif(28)
>   pmatrix <- matrix(0,8,8)
>   pmatrix[lower.tri(pmatrix)] <- pvalues
>   round(pmatrix, 4)
       [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7] [,8]
[1,] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000    0
[2,] 0.4633 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000    0
[3,] 0.9523 0.7986 0.0000 0.0000 0.0000 0.0000 0.0000    0
[4,] 0.7849 0.9342 0.8579 0.0000 0.0000 0.0000 0.0000    0
[5,] 0.7635 0.8197 0.6238 0.0773 0.0000 0.0000 0.0000    0
[6,] 0.2522 0.0046 0.7151 0.3296 0.0745 0.0000 0.0000    0
[7,] 0.7263 0.2472 0.9783 0.5498 0.8099 0.4634 0.0000    0
[8,] 0.9132 0.7540 0.9412 0.0451 0.2713 0.1563 0.6729    0
>   PMplot(pmatrix)
dev.new(): using pdf(file="Rplots1.pdf")
> 
>   Oats$nitro <- factor(Oats$nitro)
>   fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
>   predictout <- predictmeans(fm, "nitro:Variety", atvar="Variety", adj="BH", barplot=TRUE)
dev.new(): using pdf(file="Rplots2.pdf")
dev.new(): using pdf(file="Rplots3.pdf")
dev.new(): using pdf(file="Rplots4.pdf")
>   PMplot(predictout$p_valueMatrix)
dev.new(): using pdf(file="Rplots5.pdf")
>   
> 
> 
> 
> cleanEx()
> nameEx("anovalmer")
> ### * anovalmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anovalmer
> ### Title: ANOVA of a Linear Mixed Effects Model produced by 'lmer'
> ###   function
> ### Aliases: anovalmer
> 
> ### ** Examples
> 
> ## Not run for simplifying process of submiting pkg to CRAN
> library(predictmeans)
> Oats$nitro <- factor(Oats$nitro) 
> fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> anovalmer(fm)
Analysis of Variance Table of type I with Kenward-Roger
approximation for degrees of freedom
              npar  Sum Sq Mean Sq F value DDf p.value
nitro            3 20020.5  6673.5 37.6857  45 0.00000
Variety          2   526.1   263.0  1.4853  10 0.27239
nitro:Variety    6   321.8    53.6  0.3028  45 0.93220
> 
> 
> 
> cleanEx()
> nameEx("contrastmeans")
> ### * contrastmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contrastmeans
> ### Title: Linear Contrast Tests for a Linear Model
> ### Aliases: contrastmeans
> 
> ### ** Examples
> 
> library(predictmeans)
> # ftable(xtabs(yield ~ Block+Variety+nitro, data=Oats))
> Oats$nitro <- factor(Oats$nitro)
> fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> # library(lme4)
> # fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> 
> ## Not run: 
> ## The contrast has a contrast matrix as follows:
> #     0:Golden Rain 0:Marvellous 0:Victory 
> #[1,]            -1            0         1 
> #[2,]             0            0         1 
> #     0.2:Golden Rain 0.2:Marvellous 0.2:Victory 
> #[1,]               0              0           0 
> #[2,]               0              0           0 
> #     0.4:Golden Rain  0.4:Marvellous 0.4:Victory
> #[1,]               0               0           0
> #[2,]               0              -1           0
> #      0.6:Golden Rain 0.6:Marvellous 0.6:Victory
> #[1,]                0              0           0
> #[2,]                0              0           0
> 
> # 1. Enter above contrast matrix into a pop up window, then close the window
> # contrastmeans(fm, "nitro:Variety")
>  
> # 2. Construct the contrast matrix directly
> cm <- rbind(c(-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
+             c(0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0))
> contrastmeans(fm, "nitro:Variety", ctrmatrix=cm)

 Denominator degree of freedom for 'nitro:Variety' and its marginal terms vary between '10' and '45' .
 Probabilities will be calculated using '10' Df. 
$`The t tests of the specified contrasts`
     Estimate Std. Error t value df Pr(>|t|)
[1,]  -8.5000      9.715 -0.8749 10   0.4021
[2,] -45.6667      9.715 -4.7006 10   0.0008
attr(,"Note")
[1] "The p-value is adjusted by 'none' method, if p-value = 0 means p-value < 0.0001."

$K
     0:Golden Rain 0:Marvellous 0:Victory 0.2:Golden Rain 0.2:Marvellous
[1,]            -1            0         1               0              0
[2,]             0            0         1               0              0
     0.2:Victory 0.4:Golden Rain 0.4:Marvellous 0.4:Victory 0.6:Golden Rain
[1,]           0               0              0           0               0
[2,]           0               0             -1           0               0
     0.6:Marvellous 0.6:Victory
[1,]              0           0
[2,]              0           0

> 
> 
> 
> cleanEx()
> nameEx("covariatemeans")
> ### * covariatemeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covariatemeans
> ### Title: Predicted Means of a Linear Model with Covariate Variable(s)
> ### Aliases: covariatemeans
> 
> ### ** Examples
> 
>   library(predictmeans)
>   data(Oats, package="nlme")
>   fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> # library(lme4)
> # fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
>   covariatemeans(fm, "Variety", covariate="nitro")
dev.new(): using pdf(file="Rplots6.pdf")
>   covariatemeans(fm, "Variety", covariate="nitro", covariateV=seq(0, 0.6, 0.1))$data
dev.new(): using pdf(file="Rplots7.pdf")
       Variety xvar      ses      Mean        LL        UL     factors
1  Golden Rain  0.0 8.570713  81.90000  62.80326 100.99674 Golden Rain
2  Golden Rain  0.1 8.150206  89.43333  71.27354 107.59312 Golden Rain
3  Golden Rain  0.2 7.887148  96.96667  79.39301 114.54033 Golden Rain
4  Golden Rain  0.3 7.797490 104.50000  87.12611 121.87389 Golden Rain
5  Golden Rain  0.4 7.887148 112.03333  94.45967 129.60699 Golden Rain
6  Golden Rain  0.5 8.150206 119.56667 101.40688 137.72646 Golden Rain
7  Golden Rain  0.6 8.570713 127.10000 108.00326 146.19674 Golden Rain
8   Marvellous  0.0 8.570713  90.41667  71.31993 109.51340  Marvellous
9   Marvellous  0.1 8.150206  96.87500  78.71521 115.03479  Marvellous
10  Marvellous  0.2 7.887148 103.33333  85.75967 120.90699  Marvellous
11  Marvellous  0.3 7.797490 109.79167  92.41778 127.16556  Marvellous
12  Marvellous  0.4 7.887148 116.25000  98.67634 133.82366  Marvellous
13  Marvellous  0.5 8.150206 122.70833 104.54854 140.86812  Marvellous
14  Marvellous  0.6 8.570713 129.16667 110.06993 148.26340  Marvellous
15     Victory  0.0 8.570713  73.30000  54.20326  92.39674     Victory
16     Victory  0.1 8.150206  81.40833  63.24854  99.56812     Victory
17     Victory  0.2 7.887148  89.51667  71.94301 107.09033     Victory
18     Victory  0.3 7.797490  97.62500  80.25111 114.99889     Victory
19     Victory  0.4 7.887148 105.73333  88.15967 123.30699     Victory
20     Victory  0.5 8.150206 113.84167  95.68188 132.00146     Victory
21     Victory  0.6 8.570713 121.95000 102.85326 141.04674     Victory
> 
> 
> 
> cleanEx()
> nameEx("permanova.lmer")
> ### * permanova.lmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permanova.lmer
> ### Title: Permutation ANOVA for 'lmer' Model
> ### Aliases: permanova.lmer
> 
> ### ** Examples
> 
> library(predictmeans)
> Oats$nitro <- factor(Oats$nitro) 
> fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> 
> ## Permutation Test for model terms
> # permanova.lmer(fm)
> # permanova.lmer(fm, drop=FALSE)
> ## Compare to F test
> # fm0 <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> # anova(fm0)
> 
> 
> 
> cleanEx()
> nameEx("permindex")
> ### * permindex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permindex
> ### Title: Permutation Index
> ### Aliases: permindex
> 
> ### ** Examples
> 
>   library(predictmeans)
>   block <- rep(1:3, each=12)
>   group <- rep(rep(1:3, each=4), 3)
>   data <- data.frame(block, group)
>   cbind(data, permindex(data, block="block", group="group", nsim=5))  
   block group  1  2  3  4  5
1      1     1  1  8 12  4  7
2      1     1  3  5  9  3  6
3      1     1  4  7 11  1  8
4      1     1  2  6 10  2  5
5      1     2 10 10  6 11  4
6      1     2 11 12  5 10  3
7      1     2  9  9  8  9  1
8      1     2 12 11  7 12  2
9      1     3  5  3  3  5 12
10     1     3  7  2  1  6 11
11     1     3  8  1  4  7  9
12     1     3  6  4  2  8 10
13     2     1 14 18 23 21 23
14     2     1 16 20 22 23 22
15     2     1 15 19 24 22 21
16     2     1 13 17 21 24 24
17     2     2 17 16 13 17 18
18     2     2 19 14 15 20 19
19     2     2 20 15 16 19 17
20     2     2 18 13 14 18 20
21     2     3 21 21 18 14 14
22     2     3 24 23 20 16 16
23     2     3 22 24 19 15 13
24     2     3 23 22 17 13 15
25     3     1 29 36 29 35 33
26     3     1 31 33 31 36 36
27     3     1 30 34 32 33 34
28     3     1 32 35 30 34 35
29     3     2 34 31 35 30 25
30     3     2 36 29 34 32 26
31     3     2 33 30 33 29 27
32     3     2 35 32 36 31 28
33     3     3 26 28 27 27 32
34     3     3 25 26 25 25 30
35     3     3 28 27 26 28 29
36     3     3 27 25 28 26 31
>                         # Permute group as a whole within each block first, 
>                         # then permute obs within each group.
>   cbind(data, permindex(data, block="block",  nsim=5)) 
   block group  1  2  3  4  5
1      1     1 12  2  4  5  3
2      1     1  6  8 10 11 10
3      1     1  4  4  8  2  6
4      1     1  2 11  1  4  7
5      1     2  1  5 12  3  1
6      1     2  3  9  6  8  8
7      1     2  8 10 11  6 11
8      1     2 11  6  5  1  9
9      1     3 10  1  7  7 12
10     1     3  7 12  2  9  4
11     1     3  5  3  3 12  5
12     1     3  9  7  9 10  2
13     2     1 23 21 13 17 14
14     2     1 17 23 24 23 17
15     2     1 20 24 16 13 22
16     2     1 16 22 17 22 20
17     2     2 13 18 21 14 24
18     2     2 22 20 18 24 16
19     2     2 24 19 23 21 13
20     2     2 18 16 20 15 18
21     2     3 21 15 22 20 19
22     2     3 19 13 15 19 23
23     2     3 15 17 14 16 15
24     2     3 14 14 19 18 21
25     3     1 34 33 25 25 33
26     3     1 36 36 26 35 35
27     3     1 33 31 36 33 30
28     3     1 32 35 32 31 32
29     3     2 29 34 29 34 27
30     3     2 35 30 35 30 36
31     3     2 30 29 27 29 31
32     3     2 26 28 30 28 25
33     3     3 28 27 31 32 28
34     3     3 31 32 34 26 34
35     3     3 27 26 28 36 26
36     3     3 25 25 33 27 29
>                         # Permute obs within each block only.
>   cbind(data, permindex(data, group="group", nsim=5)) 
   block group  1  2  3  4  5
1      1     1 12 33 25 18 32
2      1     1  1 36 27 15 28
3      1     1  8 32 30 22 35
4      1     1  5 34 32 13 34
5      1     2  6 25 31 24 29
6      1     2  9 31 29 21 25
7      1     2  2 28 28 16 36
8      1     2  4 26 35 17 30
9      1     3  3 30 36 14 31
10     1     3 11 35 26 20 27
11     1     3  7 29 34 23 33
12     1     3 10 27 33 19 26
13     2     1 27 14 17 28 22
14     2     1 26 18 16 29 17
15     2     1 31 24 13 31 20
16     2     1 28 17 18 30 23
17     2     2 32 13 21 27 15
18     2     2 34 20 24 36 14
19     2     2 36 21 22 34 16
20     2     2 25 23 15 33 13
21     2     3 29 19 23 35 19
22     2     3 30 22 19 32 24
23     2     3 33 15 14 26 21
24     2     3 35 16 20 25 18
25     3     1 17  5  2  7  3
26     3     1 15  3  1  8  2
27     3     1 16 12  5  2  6
28     3     1 21  8  9 12 12
29     3     2 19  6 10 11  5
30     3     2 23  7  8  3  4
31     3     2 20 11 11  1  7
32     3     2 22  9  4  9 11
33     3     3 14  2 12  5  1
34     3     3 13  4  7  6 10
35     3     3 18  1  6 10  8
36     3     3 24 10  3  4  9
>                         # Permute groups as a whole block first, 
>                         # then permute obs within each group.
>   cbind(data, permindex(data, nsim=5))  # Free permutation.
   block group  1  2  3  4  5
1      1     1 36 28 20 36 22
2      1     1  6  1 21  7 27
3      1     1 20  2 24 22 23
4      1     1 33  9 36  9  3
5      1     2  8 17 18 32 28
6      1     2 11  5  3  8  1
7      1     2 31 27 33 20  2
8      1     2 22 10  2  1 19
9      1     3 21 34 26 17 36
10     1     3 28 31 28 12  5
11     1     3 17 21 15 24 30
12     1     3  9 14 10  3  9
13     2     1 29 26 13 18 12
14     2     1 18 23 16 25 25
15     2     1 19  6 11 15 18
16     2     1 12 16  4 35 26
17     2     2 32 30 23 29 15
18     2     2 35 32 27 33 13
19     2     2 30 35 34 14  7
20     2     2  5  8 30 16  4
21     2     3 25  3  7  5  6
22     2     3  2 18 29 27 21
23     2     3  7  4 32 34 32
24     2     3 10 20  1  6 29
25     3     1 13  7 25 11 34
26     3     1 34 25 35 30 16
27     3     1 24 15  5 19 10
28     3     1  3 13  6  2  8
29     3     2 16 24 22 26 24
30     3     2 26 29 19 13 11
31     3     2 23 12 17 28 35
32     3     2 15 33 14  4 31
33     3     3  4 22 31 10 20
34     3     3 14 36 12 31 17
35     3     3  1 19  8 21 33
36     3     3 27 11  9 23 14
> 
> 
> 
> cleanEx()
> nameEx("permlmer")
> ### * permlmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permlmer
> ### Title: Permutation Test of random or fixed effects for 'lmer' model.
> ### Aliases: permlmer
> 
> ### ** Examples
> 
> # library(predictmeans)
> ## Test random effects
> # fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
> # fm2 <- lmer(Reaction ~ Days + (Days || Subject), sleepstudy)
> # fm3 <- update(fm1, . ~ . - (Days | Subject) + (1 | Subject))
> # anova(fm1, fm2, fm3)
> # permlmer(fm3, fm2)
> # permlmer(fm2, fm1)
> 
> ## Test fixed effects
> # Oats$nitro <- factor(Oats$nitro)
> # fm0 <- lmer(yield ~ nitro+Variety+(1|Block/Variety), data=Oats)
> # fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> # permlmer(fm0, fm)
> 
> 
> 
> cleanEx()
> nameEx("permmodels")
> ### * permmodels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permmodels
> ### Title: Permutation Test of Linear Model
> ### Aliases: permmodels
> 
> ### ** Examples
> 
> ## Not run for simplifying process of submiting pkg to CRAN
> #library(predictmeans)
> #Oats$nitro <- factor(Oats$nitro) 
> #fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> ## library(lme4)
> ## fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> #
> ## Permutation Test for model terms
> #system.time(
> #  permlme <- permmodels(model=fm, data=Oats, block="Block", group="Variety", nsim=999)
> #)  
> #
> ## Permutation Test for multiple comparisons
> #predictmeans(model=fm, modelterm="nitro:Variety", atvar="Variety", adj="BH", 
> #  permlist=permlme, plot=FALSE)
> #
> ## Permutation Test for specified contrasts
> #cm <- rbind(c(-1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0), 
> #            c(0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0))
> #contrastmeans(model=fm, modelterm="nitro:Variety", ctrmatrix=cm, permlist=permlme)
> 
> 
> 
> cleanEx()
> nameEx("predictmeans")
> ### * predictmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predictmeans
> ### Title: Predicted Means of a Linear Model
> ### Aliases: predictmeans
> 
> ### ** Examples
> 
>   library(predictmeans)
>   ftable(xtabs(yield ~ Block+Variety+nitro, data=Oats))
                  nitro   0 0.2 0.4 0.6
Block Variety                          
VI    Golden Rain        89  82  86 104
      Marvellous         97  99 119 121
      Victory            53  74 118 113
V     Golden Rain        80  82  94 126
      Marvellous         63  70 109  99
      Victory            62  90 100 116
III   Golden Rain        60 102  89  96
      Marvellous         89 129 132 124
      Victory            68  64 112  86
IV    Golden Rain        64 103 132 133
      Marvellous         70  89 104 117
      Victory            74  89  81 122
II    Golden Rain        70 108 126 149
      Marvellous         96 124 121 144
      Victory            61  91  97 100
I     Golden Rain       117 114 161 141
      Marvellous        105 140 118 156
      Victory           111 130 157 174
>   Oats$nitro <- factor(Oats$nitro)
>   fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> # library(lme4)
> # fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
>   predictmeans(fm, "nitro", adj="BH")
dev.new(): using pdf(file="Rplots8.pdf")
dev.new(): using pdf(file="Rplots9.pdf")
$`Predicted Means`
nitro
       0      0.2      0.4      0.6 
 79.3889  98.8889 114.2222 123.3889 

$`Standard Error of Means`
All means have the same Stder 
                      7.17468 

$`Standard Error of Differences`
 Max.SED  Min.SED Aveg.SED 
4.435757 4.435757 4.435757 

$LSD
 Max.LSD  Min.LSD Aveg.LSD 
 8.93407  8.93407  8.93407 
attr(,"Significant level")
[1] 0.05
attr(,"Degree of freedom")
nitro 
   45 

$`Pairwise p-value`
         0     0.2     0.4     0.6
0   0.0000 -4.3961 -7.8529 -9.9194
0.2 0.0001  0.0000 -3.4568 -5.5233
0.4 0.0000  0.0014  0.0000 -2.0665
0.6 0.0000  0.0000  0.0446  0.0000
attr(,"Degree of freedom")
nitro 
   45 
attr(,"Note")
[1] "The matrix has t-value above the diagonal, p-value (adjusted by 'BH' method) below the diagonal"
attr(,"Letter-based representation of pairwise comparisons at significant level '0.05'")
  Treatment      Mean Group
1       0.6 123.38889  A   
2       0.4 114.22222   B  
3       0.2  98.88889    C 
4         0  79.38889     D

$mean_table
  nitro Predicted means Standard error Df LL of 95% CI UL of 95% CI LetterGrp
1     0        79.38889       7.174685 45     64.93833     93.83945      A   
2   0.2        98.88889       7.174685 45     84.43833    113.33945       B  
3   0.4       114.22222       7.174685 45     99.77167    128.67278        C 
4   0.6       123.38889       7.174685 45    108.93833    137.83945         D

>   predictmeans(fm, "nitro:Variety", atvar="Variety", adj="BH")
dev.new(): using pdf(file="Rplots10.pdf")
dev.new(): using pdf(file="Rplots11.pdf")
$`Predicted Means`
      Variety Golden Rain Marvellous  Victory
nitro                                        
0                 80.0000    86.6667  71.5000
0.2               98.5000   108.5000  89.6667
0.4              114.6667   117.1667 110.8333
0.6              124.8333   126.8333 118.5000

$`Standard Error of Means`
All means have the same Stder 
                      9.10696 

$`Standard Error of Differences`
 Max.SED  Min.SED Aveg.SED 
9.715030 7.682956 9.160828 
attr(,"For the Same Level of Factor")
           nitro  Variety
Aveg.SED 9.71503 7.682956
Min.SED  9.71503 7.682956
Max.SED  9.71503 7.682956

$LSD
 Max.LSD  Min.LSD Aveg.LSD 
19.56707 15.47427 18.45085 
attr(,"For the Same Level of Factor")
            nitro  Variety
Aveg.LSD 19.56707 15.47427
Min.LSD  19.56707 15.47427
Max.LSD  19.56707 15.47427
attr(,"Significant level")
[1] 0.05
attr(,"Degree of freedom")
nitro:Variety 
           45 

$`Pairwise comparison p-value (adjusted by 'BH' method)`
[1] "For variable 'nitro' at each level of 'Variety'"

$`Golden Rain`
    0      0.2    0.4    0.6 Group
0   1                          C  
0.2 0.0311 1                  B   
0.4 0.0002 0.0527 1          AB   
0.6 0.0001 0.003  0.2309 1   A    

$Marvellous
    0      0.2    0.4    0.6 Group
0   1                          C  
0.2 0.0134 1                  B   
0.4 0.0008 0.2809 1          AB   
0.6 0.0001 0.0311 0.2417 1   A    

$Victory
    0      0.2    0.4    0.6 Group
0   1                          C  
0.2 0.0311 1                  B   
0.4 0.0001 0.0152 1          A    
0.6 0.0001 0.0013 0.3237 1   A    

$mean_table
       Variety nitro Predicted means Standard error Df LL of 95% CI
1  Golden Rain     0        80.00000       9.106959 45     61.65764
4  Golden Rain   0.2        98.50000       9.106959 45     80.15764
7  Golden Rain   0.4       114.66667       9.106959 45     96.32431
10 Golden Rain   0.6       124.83333       9.106959 45    106.49098
2   Marvellous     0        86.66667       9.106959 45     68.32431
5   Marvellous   0.2       108.50000       9.106959 45     90.15764
8   Marvellous   0.4       117.16667       9.106959 45     98.82431
11  Marvellous   0.6       126.83333       9.106959 45    108.49098
3      Victory     0        71.50000       9.106959 45     53.15764
6      Victory   0.2        89.66667       9.106959 45     71.32431
9      Victory   0.4       110.83333       9.106959 45     92.49098
12     Victory   0.6       118.50000       9.106959 45    100.15764
   UL of 95% CI
1      98.34236
4     116.84236
7     133.00902
10    143.17569
2     105.00902
5     126.84236
8     135.50902
11    145.17569
3      89.84236
6     108.00902
9     129.17569
12    136.84236

>   predictout <- predictmeans(fm, "nitro:Variety", atvar="Variety", adj="BH", barplot=TRUE)
dev.new(): using pdf(file="Rplots12.pdf")
dev.new(): using pdf(file="Rplots13.pdf")
dev.new(): using pdf(file="Rplots14.pdf")
>   names(predictout)
 [1] "Predicted Means"                                      
 [2] "Standard Error of Means"                              
 [3] "Standard Error of Differences"                        
 [4] "LSD"                                                  
 [5] "Pairwise comparison p-value (adjusted by 'BH' method)"
 [6] "Golden Rain"                                          
 [7] "Marvellous"                                           
 [8] "Victory"                                              
 [9] "mean_table"                                           
[10] "predictmeansPlot"                                     
[11] "predictmeansBarPlot"                                  
[12] "p_valueMatrix"                                        
>   print(predictout$predictmeansPlot)
>   print(predictout$predictmeansBarPlot)
> 
> 
> 
> cleanEx()
> nameEx("residplot")
> ### * residplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residplot
> ### Title: Diagnostic Plots for a Linear (Mixed) Model
> ### Aliases: residplot
> 
> ### ** Examples
> 
> ## Note that the order of levels of nested random effects is oposite 
> ## between lme and lmer objects.
> 
> library(predictmeans)
> Oats$nitro <- factor(Oats$nitro)
> fm <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> residplot(fm, level=2)    #lme: level=2 for random effect "Block:Variety"
dev.new(): using pdf(file="Rplots15.pdf")
> 
> #  Not Run
> #  library(lme4)
> #  fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> #  residplot(fm) # lmer: By default level=1 for random effect "Block:Variety"
> 
> 
> 
> cleanEx()
> nameEx("varcomp")
> ### * varcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varcomp
> ### Title: Calculate stder and CI of variance components for 'lmer' or
> ###   'lme' model
> ### Aliases: varcomp
> 
> ### ** Examples
> 
> library(predictmeans)
> Oats$nitro <- factor(Oats$nitro) 
> fm <- lmer(yield ~ nitro*Variety+(1|Block/Variety), data=Oats)
> ## Not run: varcomp(fm)
> fm1 <- lme(yield ~ nitro*Variety, random=~1|Block/Variety, data=Oats)
> varcomp(fm1)
                                     vcov Std.error     lower     upper
Variety.Variety.var((Intercept)) 106.0620 168.83266  30.25374  371.8265
Block.Block.var((Intercept))     214.4748  67.87561  45.84330 1003.4059
sigma_sq                         177.0835  37.33247 117.14595  267.6879
> 
> data(Orthodont, package="nlme")
> mod <- lmer(distance ~ age + (age|Subject), data=Orthodont)
> ## Not run: varcomp(mod)
> mod1 <- lme(distance ~ age, random=~age|Subject, data=Orthodont)
> varcomp(mod1)
                                            vcov Std.error      lower
Subject.Subject.var((Intercept))      5.41508758 4.9583410  0.8997670
Subject.Subject.cov(age,(Intercept)) -0.32106065 0.4243794 -0.4943690
Subject.Subject.var(age)              0.05126955 0.0414508  0.0105081
sigma_sq                              1.71620400 0.3302836  1.1771755
                                          upper
Subject.Subject.var((Intercept))     32.5897399
Subject.Subject.cov(age,(Intercept))  0.1571066
Subject.Subject.var(age)              0.2501468
sigma_sq                              2.5020536
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.55 0.3 6.84 NA NA 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
